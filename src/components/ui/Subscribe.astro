---
import CTA from '../text/CTA.astro'

export interface Props {
  formId: string
  class?: string
}

const { formId, class: className } = Astro.props
---

<form id={formId} method="post" class={`${className} w-full max-w-lg`}>
  <label for="email" class="sr-only">Email:</label>
  <div class="relative h-16 mb-2">
    <input
      type="email"
      name="Email"
      id=`${formId}-email`
      class="w-full h-full py-2 pl-4 text-sm placeholder:text-grey-200 focus:outline-none focus:ring-2 focus:ring-red-500 shadow-sm border rounded-lg transition"
      autocomplete="email"
      placeholder="Enter your email"
      required
    />
    <CTA
      type="button"
      text="Subscribe"
      class="absolute top-1/2 right-[6px] -translate-y-1/2 h-[calc(100%-12px)] flex items-center text-sm"
    />
  </div>
  <p id={`${formId}-response`} class="hidden text-left text-xs">
    <!-- Form submission response handled via JS -->
  </p>
</form>

<script is:inline define:vars={{ formId }}>
  const form = document.querySelector(`#${formId}`)
  const responseMessage = form.querySelector(`#${formId}-response`)

  /**
   * Handle UI messages based on submission state
   * @param {HTMLParagraphElement} responseElement - Element to display message
   * @param {String} state - 'loading', 'error', 'success'
   * @param {String} message - Message to display
   */
  function formValidationMessage(responseElement, state, message) {
    const errorClasses = ['text-red-900']
    const successClasses = ['text-green']

    // Reset styles
    responseElement.classList.remove('hidden')
    responseElement.classList.remove(...errorClasses)
    responseElement.classList.remove(...successClasses)

    // Set message text based on API response
    responseElement.textContent = message

    // Set message color based on state
    if (state === 'error') {
      responseElement.classList.add(...errorClasses)
    } else if (state === 'success') {
      responseElement.classList.add(...successClasses)
    }
  }

  /**
   * Handle email subscription form submission
   * @param e Form submission event
   */
  async function submit(e) {
    e.preventDefault()

    // Show loading message
    formValidationMessage(responseMessage, 'loading', 'Subscribing...')

    // Get form data and send to API
    const formData = new FormData(e.target)
    const response = await fetch('/api/subscribe.json/', {
      method: 'POST',
      body: formData,
    })
    const data = await response.json()

    // Error
    if (response.status === 500 || response.status === 404) {
      formValidationMessage(responseMessage, 'error', data.message)
    }

    // Success
    if (response.status === 200) {
      formValidationMessage(responseMessage, 'success', data.message)
    }

    form?.reset()
  }

  // Submit event listener
  form?.addEventListener('submit', submit)
</script>
